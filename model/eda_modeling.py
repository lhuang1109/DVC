# -*- coding: utf-8 -*-
"""eda_modeling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14s8P9Ms0WPp83XuUmnJmGSWLA0VmLTZ1
"""

import pandas as pd
import numpy as np
import sys
import os
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import xgboost as xgb
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score
import numpy as np
import tensorflow as tf
import tensorflow_privacy as tfp
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras import backend as K
import warnings

# Suppress all warnings
warnings.filterwarnings("ignore")

import os
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"  # Suppress TensorFlow info and warning messages

# Import TensorFlow and your other dependencies here
import tensorflow as tf
import warnings

# Suppress the specific warning message
warnings.filterwarnings("ignore", category=DeprecationWarning, module="tensorflow_privacy.privacy.analysis.compute_dp_sgd_privacy")



def standard_error(x):
  stdev = x.std()
  counts = x.count()
  return stdev/np.sqrt(counts)

def EDA_Modeling_v1(filepath):
  df=pd.read_csv(filepath)

  #Normalize lifts and calculate total lifts
  df['norm_dl'] = df['deadlift']/df['weight']
  df['norm_j'] = df['candj']/df['weight']
  df['norm_s'] = df['snatch']/df['weight']
  df['norm_bs'] = df['backsq']/df['weight']

  df['total_lift'] = df['norm_dl']+df['norm_j']+df['norm_s']+df['norm_bs']

  #Divide it into train and test with the same split ratio
  col_to_drop=['age','athlete_id','name','region','team', 'affiliate','gender','eat','train','background','experience','schedule','howlong','norm_bs', 'norm_dl', 'norm_j', 'norm_s','filthy50','fgonebad','run400','run5k','pullups']
  df_select = df.drop(columns=col_to_drop)
  df_select=df_select.dropna()
  train_set, test_set = train_test_split(df_select, test_size=0.2, random_state=10)
  X_train, y_train = train_set.drop(columns=['total_lift']), train_set['total_lift']
  X_test, y_test = test_set.drop(columns=['total_lift']), test_set['total_lift']

  #Run EDA
  print(df_select.describe())

  plt.figure(figsize=(10, 8))
  corr_matrix = df_select.corr()
  sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
  plt.title('Correlation Heatmap')
  plt.show()

  plt.figure(figsize=(12, 6))

  # Scatter plot for 'candj'
  plt.subplot(1, 2, 1)
  sns.regplot(x='candj', y='total_lift', data=df_select)
  plt.xlabel('Clean and Jerk')
  plt.ylabel('Total Lift')
  plt.title('Scatter Plot: Clean and Jerk vs. Total Lift')

  # Scatter plot for 'deadlift'
  plt.subplot(1, 2, 2)
  sns.regplot(x='deadlift', y='total_lift', data=df_select)
  plt.xlabel('Deadlift')
  plt.ylabel('Total Lift')
  plt.title('Scatter Plot: Deadlift vs. Total Lift')

  plt.tight_layout()
  plt.show()

  plt.figure(figsize=(12, 6))

  # Scatter plot for 'fran'
  plt.subplot(1, 2, 1)
  sns.regplot(x='fran', y='total_lift', data=df_select)
  plt.xlabel('Fran')
  plt.ylabel('Total Lift')
  plt.title('Scatter Plot: Fran vs. Total Lift')

  # Scatter plot for 'snatch'
  plt.subplot(1, 2, 2)
  sns.regplot(x='snatch', y='total_lift', data=df_select)
  plt.xlabel('Snatch')
  plt.ylabel('Total Lift')
  plt.title('Scatter Plot: Snatch vs. Total Lift')

  plt.tight_layout()
  plt.show()

  #Train the model and obtain the metrics
  rnd_clf = RandomForestRegressor(n_estimators=100, max_depth = 12,oob_score=True, random_state=10).fit(X_train,y_train)
  rnd_pred = rnd_clf.predict(X_test)

  mse = mean_squared_error(y_test, rnd_pred)
  rmse = np.sqrt(mse)
  mape = mean_absolute_percentage_error(y_test, rnd_pred)
  r2 = r2_score(y_test, rnd_pred)

  print(f'Random Forest Regression Model Evaluation:')
  print(f'Mean Squared Error (MSE): {mse:.3f}')
  print(f'Root Mean Squared Error (RMSE): {rmse:.3f}')
  print(f'Mean Absolute Percentage Error (MAPE): {mape:.3f}')
  print(f'R-squared (R2): {r2:.3f}')

def EDA_Modeling_v2(filepath):
  df=pd.read_csv(filepath)

  #Normalize lifts
  df['norm_dl'] = df['deadlift']/df['weight']
  df['norm_j'] = df['candj']/df['weight']
  df['norm_s'] = df['snatch']/df['weight']
  df['norm_bs'] = df['backsq']/df['weight']

  df['total_lift'] = df['norm_dl']+df['norm_j']+df['norm_s']+df['norm_bs']

  #EDA
  #Lifts
  #plt.style.use('ggplot')

  plt.rcParams['figure.figsize'] = 10,6
  xlabel = 'Lift in body weight'

  fig, axes = plt.subplots(nrows=2, ncols=2)
  axes[0, 0].remove()  # Remove overlapping axes warning
  axes[0, 0] = fig.add_subplot(2, 2, 1)
  sns.histplot(data=df, x='norm_dl', hue='gender', kde=True, ax=axes[0, 0])
  axes[0, 0].set_title('Deadlift')
  axes[0, 0].set_xlabel(xlabel)

  axes[0, 1].remove()  # Remove overlapping axes warning
  axes[0, 1] = fig.add_subplot(2, 2, 2)
  sns.histplot(data=df, x='norm_j', hue='gender', kde=True, ax=axes[0, 1])
  axes[0, 1].set_title('Clean and jerk')
  axes[0, 1].set_xlabel(xlabel)

  axes[1, 0].remove()  # Remove overlapping axes warning
  axes[1, 0] = fig.add_subplot(2, 2, 3)
  sns.histplot(data=df, x='norm_s', hue='gender', kde=True, ax=axes[1, 0])
  axes[1, 0].set_title('Snatch')
  axes[1, 0].set_xlabel(xlabel)

  axes[1, 1].remove()  # Remove overlapping axes warning
  axes[1, 1] = fig.add_subplot(2, 2, 4)
  sns.histplot(data=df, x='norm_bs', hue='gender', kde=True, ax=axes[1, 1])
  axes[1, 1].set_title('Back squat')
  axes[1, 1].set_xlabel(xlabel)

  plt.tight_layout()
  plt.show()

# Total lift
  plt.figure()
  sns.histplot(data=df, x='total_lift', hue='gender', kde=True)
  plt.title('Normalized total lift')
  plt.xlabel(xlabel)

  plt.show()


  #Region
  plt.subplot(1,2,1)
  plt.title('Region')
  sns.histplot(data = df, x = 'region')
  plt.xlabel('')
  plt.xticks(rotation = 90)

  plt.subplot(1,2,2)
  plt.title('Country')
  plt.bar('US',df['US'].sum())
  plt.bar('non-US',(df.shape[0]-df['US'].sum()))

  plt.tight_layout()
  plt.show()

  #Total lift
  plt.subplot(1,2,1)
  sns.boxplot(x=df.region,y=df.total_lift)
  plt.xticks(rotation = 90)
  plt.xlabel('')
  plt.ylabel('Total lift (bodyweight)')
  ax = plt.subplot(1,2,2)
  sns.boxplot(x=df.US, y=df.total_lift, hue = df.gender)
  plt.tight_layout()
  plt.ylabel('Total lift (bodyweight)')
  ax.set_xticklabels(('Outside US','US'))
  plt.xlabel('')
  plt.show()

  #BMI
  #Mean BMI

  df['bmi_rounded'] =  df['BMI'].round()
  df_bmi = df[['bmi_rounded','total_lift','gender']].groupby(['bmi_rounded','gender']).agg(['mean',standard_error,'size']).sort_values('bmi_rounded').reset_index()
  df_bmi_f = df_bmi[(df_bmi['gender']=='Female')&(df_bmi['total_lift']['size']>5)]
  df_bmi_m = df_bmi[(df_bmi['gender']=='Male')&(df_bmi['total_lift']['size']>5)]

  # Plot 1 - Histograms of height and weight
  plt.subplot(1, 2, 1)
  sns.histplot(data=df, x='height', hue='gender', binwidth=1, kde=True)
  plt.subplot(1, 2, 2)
  sns.histplot(data=df, x='weight', hue='gender', binwidth=5, kde=True)
  plt.tight_layout()
  plt.show()

  # Plot 2 - Histogram of BMI
  sns.histplot(data=df, x='BMI', hue='gender', binwidth=1, kde=True)
  plt.tight_layout()
  plt.show()


  # Plot 3 - Scatter plot of BMI and total lift
  plt.figure(figsize=(10, 6))
  plt.subplot(1, 2, 1)
  plt.scatter(df.BMI[df.gender == 'Male'], df.total_lift[df.gender == 'Male'], alpha=0.01, color='crimson', label='Male')
  plt.scatter(df.BMI[df.gender == 'Female'], df.total_lift[df.gender == 'Female'], alpha=0.01, color='teal', label='Female')
  plt.xlabel('BMI (kg/m2)')
  plt.ylabel('Total lift \n(body weight)')
  leg = plt.legend()
  for lh in leg.legendHandles:
    lh.set_alpha(1)

  # Plot 4 - Line plot of BMI and mean total lift
  plt.subplot(1, 2, 2)
  plt.plot(df_bmi_m['bmi_rounded'], df_bmi_m['total_lift']['mean'], '.-', color='crimson', label='Male')
  plt.errorbar(df_bmi_m['bmi_rounded'], df_bmi_m['total_lift']['mean'], yerr=df_bmi_m['total_lift']['size'], color='crimson', label='_male_')
  plt.plot(df_bmi_f['bmi_rounded'], df_bmi_f['total_lift']['mean'], '.-', color='teal', label='Female')
  plt.errorbar(df_bmi_f['bmi_rounded'], df_bmi_f['total_lift']['mean'], yerr=df_bmi_f['total_lift']['size'], color='teal', label='_female_')
  plt.xlabel('BMI (kg/m2)')
  plt.ylabel('Mean total lift \n(bodyweight)')
  plt.legend()
  plt.tight_layout()
  plt.show()

  #Age
  sns.histplot(data = df, x = 'age', hue='gender',binwidth=1,kde = True)
  plt.show()

  df_age = df[['age','gender','total_lift']].groupby(['age','gender']).agg(['mean',standard_error,'size']).sort_values('age').reset_index()
  df_age_f = df_age[(df_age['gender']=='Female')&(df_age['total_lift']['size']>5)]
  df_age_m = df_age[(df_age['gender']=='Male')&(df_age['total_lift']['size']>5)]

  plt.subplot(1,2,1)
  plt.scatter(df.age[df.gender=='Male'], df.total_lift[df.gender=='Male'],alpha=0.01,color='crimson',label='Male')
  plt.scatter(df.age[df.gender=='Female'], df.total_lift[df.gender=='Female'],alpha=0.01,color='teal',label='Female')
  plt.xlabel('Years')
  plt.ylabel('Total lift \n(bodyweight)')
  leg = plt.legend()
  for lh in leg.legendHandles:
    lh.set_alpha(1)

  plt.subplot(1,2,2)
  sns.lineplot(x=df_age_m['age'],y=df_age_m['total_lift']['mean'],color='crimson',label='Male')
  plt.errorbar(df_age_m.age,df_age_m['total_lift']['mean'],yerr=df_age_m['total_lift']['standard_error'],color='crimson',label='_Male_')
  sns.lineplot(x=df_age_f['age'],y=df_age_f['total_lift']['mean'],color='teal', label='Female')
  plt.errorbar(df_age_f.age,df_age_f['total_lift']['mean'],yerr=df_age_f['total_lift']['standard_error'],color='teal',label='_Female_')
  plt.legend()
  plt.xlabel('Years')
  plt.ylabel('Mean total lift \n(bodyweight)')

  plt.tight_layout()

  #Athele Style
  # Convert non-numeric columns to numeric types
  df['exp_lt6mo'] = pd.to_numeric(df['exp_lt6mo'], errors='coerce')
  df['exp_6to12mo'] = pd.to_numeric(df['exp_6to12mo'], errors='coerce')
  df['exp_1to2yrs'] = pd.to_numeric(df['exp_1to2yrs'], errors='coerce')
  df['exp_2to4yrs'] = pd.to_numeric(df['exp_2to4yrs'], errors='coerce')
  df['exp_4plus'] = pd.to_numeric(df['exp_4plus'], errors='coerce')

# Plotting
  plt.figure(figsize=(14, 9))
  plt.suptitle('Lifestyle Survey Responses')

  plt.subplot(2, 3, 1)
  plt.bar('<0.5', df['exp_lt6mo'].sum())
  plt.bar('0.5-1', df['exp_6to12mo'].sum())
  plt.bar('1-2', df['exp_1to2yrs'].sum())
  plt.bar('2-4', df['exp_2to4yrs'].sum())
  plt.bar('4+', df['exp_4plus'].sum())
  plt.title('Crossfit age')
  plt.ylabel('Count')
  plt.xlabel('Years')

  plt.subplot(2, 3, 2)
  plt.bar('0', df['sched_0extra'].sum())
  plt.bar('1', df['sched_1extra'].sum())
  plt.bar('2', df['sched_2extra'].sum())
  plt.bar('3+', df['sched_3extra'].sum())
  plt.title('Two-a-day frequency')
  plt.ylabel('Count')
  plt.xlabel('Frequency per week')
  plt.xticks(rotation=90)

  plt.subplot(2, 3, 3)
  plt.bar('4+', df['rest_plus'].sum())
  plt.bar('<4', df['rest_minus'].sum())
  plt.title('Rest days')
  plt.xlabel('Days per month')
  plt.ylabel('Count')

  plt.subplot(2, 3, 4)
  plt.bar('No', df['exp_alone'].sum() - df['exp_start_nr'].sum())
  plt.bar('Yes', df['exp_coach'].sum())
  plt.title('Started with coach')
  plt.ylabel('Count')

  plt.subplot(2, 3, 5)
  plt.bar('High\nschool', df['high_school'].sum())
  plt.bar('College', df['college'].sum())
  plt.bar('Pro', df['pro'].sum())
  plt.bar('None', df['no_background'].sum())
  plt.bar('Rec.\nsports', df['rec'].sum())
  plt.title('Athletic history')
  plt.ylabel('Count')

  plt.subplot(2, 3, 6)
  plt.bar('Eats\nquality', df['eat_quality'].sum())
  plt.bar('Cheat\nmeals', df['eat_cheat'].sum())
  plt.bar('Measures\nfood', df['eat_weigh'].sum())
  plt.bar('Paleo', df['eat_paleo'].sum())
  plt.bar('Eats\nconvenience', df['eat_conv'].sum())
  plt.title('Eating habits')
  plt.ylabel('Count')

  plt.tight_layout()
  plt.show()


  #Split
  df_select = df.drop(columns=['age','region','fran','helen','grace','filthy50','fgonebad','run400','run5k','pullups','name','height','athlete_id','team','train','affiliate','weight','candj','snatch','deadlift','norm_bs', 'norm_dl', 'norm_j', 'norm_s','bmi_rounded','backsq','eat','background','experience','schedule','howlong','gender'])
  train_set, test_set = train_test_split(df_select, test_size=0.2, random_state=10)
  X_train, y_train = train_set.drop(columns=['total_lift']), train_set['total_lift']
  X_test, y_test = test_set.drop(columns=['total_lift']), test_set['total_lift']

  #Train Baseline Model (Random Forest)
  #random forest baseline
  rnd_clf = RandomForestRegressor(n_estimators=100, max_depth = 12,oob_score=True, random_state=10).fit(X_train,y_train)
  rnd_pred = rnd_clf.predict(X_test)

  mse = mean_squared_error(y_test, rnd_pred)
  rmse = np.sqrt(mse)
  mape = mean_absolute_percentage_error(y_test, rnd_pred)
  r2 = r2_score(y_test, rnd_pred)
  
  print("This is non-DP model in V2")
  print(f'Random Forest Regression Model Evaluation:')
  print(f'Mean Squared Error (MSE): {mse:.3f}')
  print(f'Root Mean Squared Error (RMSE): {rmse:.3f}')
  print(f'Mean Absolute Percentage Error (MAPE): {mape:.3f}')
  print(f'R-squared (R2): {r2:.3f}')


  # Set the parameters
  l2_norm_clip = 1.5
  noise_multiplier = 1.3
  num_microbatches = 1
  learning_rate = 0.25

  # Create the model
  model = tf.keras.Sequential([
      tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
      tf.keras.layers.Dense(64, activation='relu'),
      tf.keras.layers.Dense(1)])

# Define the optimizer
  optimizer = tfp.DPKerasSGDOptimizer(
      l2_norm_clip=l2_norm_clip,
      noise_multiplier=noise_multiplier,
      num_microbatches=num_microbatches,
      learning_rate=learning_rate)

# Define custom metrics
  def rmse(y_true, y_pred):
    return K.sqrt(K.mean(K.square(y_pred - y_true)))

  def r_squared(y_true, y_pred):
    SS_res = K.sum(K.square(y_true - y_pred))
    SS_tot = K.sum(K.square(y_true - K.mean(y_true)))
    return 1 - SS_res / (SS_tot + K.epsilon())

# Compile the model
  model.compile(optimizer=optimizer, loss='mean_squared_error', metrics=['mse', rmse, 'mape', r_squared])

# Train the model
  model.fit(X_train, y_train,
            epochs=10, validation_data=(X_test, y_test), batch_size=32)

  dp_pred=model.predict(X_test)
# Calculate evaluation metrics
  dp_mse = mean_squared_error(y_test, dp_pred)
  dp_rmse = np.sqrt(dp_mse)
  dp_mape = mean_absolute_percentage_error(y_test, dp_pred)
  dp_r2 = r2_score(y_test, dp_pred)
  
  
  print("This is DP model in V2 ")
  print(f'Neural Network Model Evaluation:')
  print(f'Mean Squared Error (MSE): {dp_mse:.3f}')
  print(f'Root Mean Squared Error (RMSE): {dp_rmse:.3f}')
  print(f'Mean Absolute Percentage Error (MAPE): {dp_mape:.3f}')
  print(f'R-squared (R2): {dp_r2:.3f}')

  eps, _=tfp.compute_dp_sgd_privacy(n=X_train.shape[0],batch_size=32,
                                              noise_multiplier=noise_multiplier,
                                              epochs=10,
                                              delta=1e-5)

  print(f'Epsilon value: {eps:.3f}')

if __name__=="__main__":
  file_path=sys.argv[1]

  import os
  file_size = os.path.getsize(file_path) / (1024 * 1024)  # File size in MB

  if file_size >40:
      EDA_Modeling_v1(file_path)
  elif file_size <40:
      EDA_Modeling_v2(file_path)
  else:
      print("Unsupported file version.")
